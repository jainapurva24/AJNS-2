--index.js--

const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const Product = require("./Product");

const app = express();
app.use(cors());
app.use(express.json());

mongoose.connect("mongodb://localhost:27017/reactexam")
.then(()=>{
    console.log("MongoDB COnnected");
    app.listen(3000,()=>{
        console.log("Server is running on port 3000");
    });    
})
.catch((error)=> {
    console.log("Error:",error);
})


app.post("/add-product",async (req,res)=> {
    const {name,description,price,quantity} = req.body;
    try{
        const productData = await Product.create({
            name:name,
            description:description,
            price:price,
            quantity:quantity
        })
        res.status(200).json(productData);
        console.log("Product Added");
    }catch(error) {
        res.status(400).send(error);
    }
});

app.get("/show-product",async (req,res)=> {
    try {
        const showAll = await Product.find();
        res.json(showAll);
    } catch (error) {
        console.log("Error: ",error);        
    }
});

app.get("/show-product/:id",async (req,res)=> {
    const {id} = req.params;
    try{
        const productData = await Product.findById({_id: id});
        res.status(200).json(productData);
    } catch(error) {
        console.log("Error: ",error);
    }
});

app.delete("/delete-product/:id",async (req,res)=> {
    const {id} = req.params;
    try{
        const productData = await Product.findByIdAndDelete({_id: id});
        res.status(200).json(productData);
    } catch(error) {
        console.log("Error: ",error);
    }
});

app.patch("/update-product/:id",async (req,res)=> {
    const {id} = req.params;
    const {name,description,price,quantity} = req.body;
    try {
         const updateUser = await Product.findByIdAndUpdate(id,req.body,{new:true});
         res.send(200).json(updateUser);
    } catch (error) {
        console.log(error);
    }
});





--Product.js--

const mongoose = require("mongoose");

const productSchema = new mongoose.Schema({
    name: {
        type:String,
        required:true
    },
    description: {
        type:String,
    },
    price: {
        type:String,
    },
    quantity: {
        type:String,
    }
})

const Product = mongoose.model("Product",productSchema);

module.exports = Product;




--App.js--

import './App.css';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import View from './components/View';
import Add from './components/Add';
import Navbar from './components/Navbar';
import Edit from './components/Edit';

function App() {
  return (
    <div className="App">
      <BrowserRouter>
      <Navbar/>
        <Routes>
          <Route path='/' element={<View/>} />
          <Route path='/add' element={<Add/>} />
          <Route path='/:id' element={<Edit/>} />
        </Routes>
      </BrowserRouter>
    </div>
  );
}

export default App;





--Add.jsx--

import { useState } from "react";


function Add() {
    const [name,setName] = useState("");
    const [description,setDescription] = useState("");
    const [price,setPrice] = useState("");
    const [quantity,setQuantity] = useState("");

    const handleSubmit = async (e) => {
        e.preventDefault();
        const addProduct = {name,description,price,quantity};
        const response = await fetch("http://localhost:3000/add-product",{
            method: "POST",
            body: JSON.stringify(addProduct),
            headers: {
                "Content-Type": "application/json",
            }
        })
        const result = await response.json();
        if(response.ok) {
            console.log(result);
            setName("");
            setDescription("");
            setPrice("");
            setQuantity("");
            alert("Product added successfully");
        }
        if(!response.ok) {
            console.log(result.error);            
        }
    }

    return(
        
            <form onClick={handleSubmit}>
                <h3>Add Product</h3>
                <input type="text" value={name} onChange={(e)=>setName(e.target.value)} placeholder="Product name" required/><br></br><br></br>
                <input type="text" value={description} onChange={(e)=>setDescription(e.target.value)} placeholder="Product description" required/><br></br><br></br>
                <input type="number" value={price} onChange={(e)=>setPrice(e.target.value)} placeholder="Product price" required/><br></br><br></br>
                <input type="number" value={quantity} onChange={(e)=>setQuantity(e.target.value)} placeholder="Product quantity" required/><br></br><br></br>
                <button type="submit" style={{padding:"10px"}}>Add</button>
            </form>
       
    )
}

export default Add;





--Edit.jsx--

import { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";


function Edit() {
    const [name,setName] = useState("");
    const [description,setDescription] = useState("");
    const [price,setPrice] = useState("");
    const [quantity,setQuantity] = useState("");

    const {id} = useParams();
    const navigate = useNavigate();

    const getSingleProduct = async() => {
        const response = await fetch(`http://localhost:3000/show-product/${id}`);
        const result = await response.json();
        if(response.ok) {
            setName(result.name);
            setDescription(result.description);
            setPrice(result.price);
            setQuantity(result.quantity);
        }
    }

    const handleUpdate = async(e) => {
        e.preventDefault();
        const updatedProduct = {name,description,price,quantity};
        const response = await fetch(`http://localhost:3000/update-product/${id}`,{
            method: "PATCH",
            body: JSON.stringify(updatedProduct),
            headers: {
                "Content-Type": "application/json",
            }
        });
        if(response.ok){
            console.log("Updated successfully");
            navigate("/");         
        }
    }

    useEffect(()=> {
        getSingleProduct();
    },[])

    return (
            <form onSubmit={handleUpdate}>
            <h3>Edit Product</h3>
            <input type="text" value={name} onChange={(e)=>setName(e.target.value)} placeholder="Product name" required/><br></br><br></br>
            <input type="text" value={description} onChange={(e)=>setDescription(e.target.value)} placeholder="Product description" required/><br></br><br></br>
            <input type="number" value={price} onChange={(e)=>setPrice(e.target.value)} placeholder="Product price" required/><br></br><br></br>
            <input type="number" value={quantity} onChange={(e)=>setQuantity(e.target.value)} placeholder="Product quantity" required/><br></br><br></br>
            <button type="submit" style={{padding:"10px"}}>Update</button>
    </form>
    );
  }
  
  export default Edit;






--Navbar.jsx--

import { Link } from "react-router-dom";


function Navbar() {
    return(
        <>
            <ul style={{listStyle:"none",display:"flex"}}>
                <li style={{margin:"30px",padding:"20px"}}><Link to='add'>Add</Link></li>
                <li style={{margin:"30px",padding:"20px"}}><Link to="/">Display</Link></li>
            </ul>
        </>
    )
}

export default Navbar;





--View.jsx--

import { useEffect, useState } from "react";
import { Link } from "react-router-dom";


function View() {

    const [data,setData] = useState([]);

    async function getProduct() {
        const response = await fetch("http://localhost:3000/show-product");
        const result = await response.json();

        if(response.ok){
            setData(result);
            console.log(result);
        }
    }

    const handleDelete = async (id) => {
        const response = await fetch(`http://localhost:3000/delete-product/${id}`,{
            method: 'DELETE'
        });

        if(response.ok){
            alert("product deleted successfully");
            getProduct();
        }

    }

    
    useEffect(()=>{
        getProduct();
    },[])


    return(
        <>
           <h3>Products List</h3>
           <table border="1px">
                <thead>
                    <th>Product Name</th>
                    <th>Description</th>
                    <th>Price</th>
                    <th>Quantity Name</th>
                    <th>Action</th>
                    <th>Action</th>
                </thead>
                
                
                <tbody>
                {data?.map((ele)=> (
                    <tr key={ele._id}>
                        <td> {ele.name} </td>
                        <td> {ele.description} </td>
                        <td> {ele.price} </td>
                        <td> {ele.quantity} </td>
                        <td> <button type="submit" onClick={()=>handleDelete(ele._id)}>Delete</button> </td>
                        <td> <button type="submit"> <Link to={`/${ele._id}`}> Edit </Link> </button>  </td>
                    </tr>
                    ))}
                </tbody>
                

           </table>
        </>
    )
}

export default View;	
